#pragma once

// STD
#include <ranges>
#include <random>

// PCG
#include <pcg_random.hpp>


namespace Bench::Dist {
	template<class T, int64 N>
	struct Uniform {
		using ValueType = T;
		std::array<T, N> storage;
		using D = std::conditional_t<std::is_floating_point_v<T>, std::uniform_real_distribution<T>, std::uniform_int_distribution<T>>;

		Uniform() {
			// New seed: std::cout << "\n\n"; for (int i = 0; i < 128; ++i) { std::cout << "0x"<< std::hex << std::uppercase << std::random_device{}() << "u, "; } std::cout << "\n\n";
			pcg32_k16384 rng = std::seed_seq{0x75106832u, 0x2397B5A1u, 0x457936Eu, 0x234FA80u, 0xA9E39834u, 0x39E0162Fu, 0x1A96E20Eu, 0xAE0535CEu, 0xD01CC323u, 0xFA9D9792u, 0x645A3124u, 0x1E460FE8u, 0xD5F02B3Au, 0x2D8CA1Eu, 0xD2A3B31Cu, 0x828F785Du, 0x23BA589u, 0xE09221BDu, 0x431149B7u, 0x5CFC1755u, 0x9F6AFABDu, 0xF6AD9458u, 0xCCD1C372u, 0x7A81711Cu, 0xF393944Cu, 0xEF99DF6Au, 0x8F120DEu, 0xF46CCCF3u, 0x980CCF5Fu, 0xF041DFA9u, 0xE64A0094u, 0xDB8BAA5Eu, 0x74BAC338u, 0x6D797465u, 0xEFE00816u, 0x5263D42u, 0x6D5825B3u, 0x651774Fu, 0x98EBC809u, 0x4ED6CB1Cu, 0xFA3D0A13u, 0x568B773Bu, 0x4FA7D4F1u, 0xC0C534F5u, 0x4D4D766Du, 0xB5CA6600u, 0x4F6CA519u, 0xD74B2B6u, 0xB09E7948u, 0x2FFB60C2u, 0x650E4841u, 0xAC69311Fu, 0x4484CBE3u, 0x141B1C0Bu, 0x641066CEu, 0xBB35C31Cu, 0xBD407F50u, 0x3B9610EFu, 0xB057FFB2u, 0x2134BF52u, 0x9FE24508u, 0xE36B9549u, 0x633AA7EEu, 0x9ECC66EBu, 0xF17E6C82u, 0xAA4B3C59u, 0xA3AED572u, 0xD6DAFFD1u, 0xAEECEAF7u, 0xBCA1ECA5u, 0x16CAC278u, 0x4E5DC2C6u, 0xF267F8A2u, 0x7B58A048u, 0xA585796Bu, 0x9964B522u, 0x580AA980u, 0x89339A46u, 0x580FFDC3u, 0xD6C69DF0u, 0xA559C9B9u, 0x461E655Au, 0xD277DB0Eu, 0x4A343129u, 0xFCF4AB2Bu, 0x4324F26Au, 0xC510BCFDu, 0xAD3E9A22u, 0x4C8D227Du, 0x27E77384u, 0x2E57E62Fu, 0x930E2DD0u, 0x6E56AEE8u, 0x6D976138u, 0x412FCA68u, 0x298156CEu, 0x3584A5ABu, 0x4BA527DDu, 0x8AB4C69Bu, 0x736E6F16u, 0xC2164BEFu, 0xB1CE39E3u, 0x2FE61036u, 0x30AD8892u, 0x7DF2DA23u, 0xA0F0EE0Au, 0xEA0DBFC3u, 0x48555391u, 0x8B600E4Du, 0xDDC8B4ADu, 0xDAD019FAu, 0xB0FBD8BAu, 0xAC7899E2u, 0x6CD08CF6u, 0x9CEE0B84u, 0x900AD621u, 0xBDAF4062u, 0xF86589DAu, 0x24FA873Eu, 0xDB53A536u, 0x54C29AE9u, 0x898A1CB6u, 0x5CF366A4u, 0xA1ECE5ECu, 0x1727AC3Fu, 0x374E648Fu, 0x826EBC76u, 0x4B499542u};

			D dist(0, std::numeric_limits<T>::max());
			for (int64 i = 0; i < N; ++i) {
				storage[i] = dist(rng);
			}
		}

		decltype(auto) begin() const { return storage.begin(); }
		decltype(auto) end() const { return storage.end(); }

		constexpr static int64 size() noexcept { return N; }
	};
}
